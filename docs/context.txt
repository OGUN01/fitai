# FitAI: Fitness App with AI Capabilities

## App Overview

FitAI is an AI-powered fitness application that functions as a personalized fitness coach, providing customized workout routines and diet plans based on user preferences and goals. The app leverages Gemini 2.0 Pro to generate personalized content and analyze user progress, creating a comprehensive fitness experience.

## Tech Stack

- **Frontend**: React Native with TypeScript, Expo, and Expo Router
- **Backend/Database**: Supabase
- **UI Framework**: React Native Paper
- **AI Processing**: Gemini 2.0 Pro
- **Data Visualization**: React Native Chart Kit
- **Local Storage**: AsyncStorage

## Data Storage Architecture (Updated March 23, 2025)

### Database Structure
1. **Core Tables**:
   - `profiles`: Main user profile information with JSONB columns for complex data
   - `workout_completions`: Records of completed workouts with user_id, workout_date, day_number
   - `meal_completions`: Records of meal consumption with user_id, meal_date, meal_type
   - `preferences`: User preferences data (optional)
   - `workouts`: Workout plans and templates
   - `meal_plans`: Meal plans and recipes
   - `progress`: User progress tracking data

2. **Profiles Table Columns**:
   - `id` (primary key, matches auth.users.id)
   - `has_completed_onboarding` (boolean)
   - `current_onboarding_step` (string)
   - Standardized measurement columns:
     - `height_cm` (number)
     - `weight_kg` (number)
     - `target_weight_kg` (number)
   - JSONB columns for nested data:
     - `diet_preferences` (JSONB - contains all diet related data)
     - `workout_preferences` (JSONB - contains all workout related data)
     - `body_analysis` (JSONB - contains all body-related data)

3. **Data Synchronization Strategy**:
   - Dual storage approach: server (Supabase) and local (AsyncStorage)
   - Data is synchronized in both directions
   - ProfileContext handles fetching, updating, and synchronizing profile data
   - Error handling for offline scenarios and sync failures
   - Type conversion between camelCase (frontend) and snake_case (database)

4. **Synchronization Mechanism**:
   - `synchronizeProfileData` function ensures data consistency between nested objects and root properties
   - `deepMerge` utility handles complex nested object merging
   - AsyncStorage caching with proper TTL for offline access
   - Automatic refresh when user switches between tabs

## Recent Updates and Improvements (March 23, 2025)

### Data Persistence and System Migration Improvements

1. **Cross-System Compatibility**:
   - Enhanced data storage mechanisms to ensure all user data persists across systems
   - Implemented robust Supabase synchronization to maintain consistent user state
   - Added comprehensive error handling for network failures during sync
   - Ensured proper token refresh and session management across devices

2. **Body Analysis Storage Optimization**:
   - Fixed body analysis data persistence issues
   - Enhanced display of body analysis metrics with proper formatting
   - Improved synchronization between camelCase and snake_case property versions
   - Added fallback values for all critical measurements

3. **Streak and Progress Calculation Improvements**:
   - Enhanced workout streak calculation with proper date handling
   - Fixed day streak synchronization between database and UI
   - Improved completion rate calculations with accurate denominators
   - Added comprehensive logging for debugging progress calculations

### Diet Generation Enhancements

1. **Improved Recipe Generation Reliability**:
   - Implemented preservation of real recipes even when JSON structure is compromised
   - Prioritized authentic regional cuisine over placeholder content
   - Added multiple fallback mechanisms to enhance reliability
   - Improved error handling to prevent crashes from malformed diet data
   - Enhanced meal plan generator to create completely unique meals for each day of the week
   - Implemented robust prompting strategy to ensure diversity in meal types across days
   - Added sophisticated variation algorithms for fallback mechanisms when LLM generation is incomplete

2. **Enhanced Meal Uniqueness**:
   - Updated Pydantic-style meal plan generator to explicitly require different meals for each day
   - Improved prompt engineering to prevent the LLM from creating variations of the same meals
   - Enhanced fallback mechanism to create truly unique meal names and recipes rather than simple variations
   - Added comprehensive validation to ensure meal uniqueness requirements are met
   - Implemented intelligent naming algorithms for fallback-generated meals to maintain authentic cuisine styles

### Home Tab Synchronization Fixes

1. **Meal Timing Display Correction**:
   - Fixed breakfast, lunch, and dinner times in the nutrition card to properly reflect user selections from the onboarding process
   - Implemented proper data flow from diet preferences to home screen
   - Added fallback times for cases where user preferences aren't available

2. **Diet Completion Progress Updates**:
   - Corrected synchronization between diet tab completion markers and the home tab nutrition card progress bar
   - Ensured that marking meals as completed in the diet tab properly updates the activity summary

3. **Activity Summary Accuracy Improvements**:
   - Fixed activity summary to correctly display workout completion percentage based on actual completion status
   - Implemented proper calculation to only show 100% when all workouts and meals are completed
   - Enhanced data flow between tracking service and home display components

### Navigation and UI Improvements

1. **Floating Action Button (FAB) Menu Update**:
   - Removed the "Log Weight" option from the FAB menu in CustomTabBar.tsx
   - Simplified the menu to focus on core functionality: Progress, Log Workout, Log Meal, and Body Analysis
   - Improved the user experience by reducing menu options to the most frequently used actions

2. **Progress Tab Enhancements**:
   - Updated the streak display in the UI to use the calculateDayStreak function
   - Ensured tracking service returns updated workout statistics including completion rate and best streak
   - Corrected data flow to display accurate workout progress metrics

3. **Tracking Service Improvements**:
   - Updated the getTrackingAnalytics function to ensure workoutStats returns correct values
   - Fixed calculation of totalWorkouts to reflect completedWorkouts
   - Enhanced reporting of workout statistics for improved accuracy

These updates collectively improved the reliability, accuracy, and user experience of the application, addressing key synchronization issues between different tabs and ensuring consistent data display throughout the app.

## Recent Fixes and Ongoing Issues (March 21, 2025)

### Review Screen Data Inconsistency Resolution

1. **Root Cause Identification**:
   - Review screen showed incorrect or missing data despite users completing all onboarding steps
   - Data was being stored in nested objects (`body_analysis`, `workout_preferences`, `diet_preferences`) but not synced to root-level properties
   - Text rendering errors occurred due to undefined or non-string values being accessed directly in JSX

2. **Synchronization Implementation**:
   - Created `utils/profileSynchronizer.ts` to ensure data consistency between nested objects and root properties
   - Added comprehensive type safety with explicit String() conversions to prevent React Native text rendering issues
   - Implemented proper array initialization to prevent "map is not a function" errors
   - Added error handling with try/catch blocks to prevent crashes from malformed data

3. **ProfileContext Enhancements**:
   - Modified `fetchProfile` and `refreshProfile` to apply the synchronizer when loading data
   - Added proper error handling and type checking throughout
   - Ensured that nested objects are initialized even when missing in the original data

4. **Review Screen UI Fixes**:
   - Fixed template literal syntax in height display to properly evaluate expressions
   - Added safe access patterns with optional chaining for all property accesses
   - Implemented fallbacks to empty strings for potentially undefined text values
   - Added proper checks for arrays before using methods like .map() or .join()

5. **Persistent Text Rendering Issue**:
   - Despite our fixes, the error "Text strings must be rendered within a <Text> component" persists
   - The error occurs during profile data loading, before the UI is fully rendered
   - We've tried extensive type checking and string conversions but haven't fully resolved it

### Database Schema Structure

1. **Core Tables**:
   - `profiles`: Main user profile information
   - `workout_completions`: Records of completed workouts
   - `meal_tracking`: Records of meal consumption

2. **Profiles Table Columns**:
   - `id` (primary key, matches auth.users.id)
   - `has_completed_onboarding` (boolean)
   - `current_onboarding_step` (string)
   - Standardized measurement columns:
     - `height_cm` (number)
     - `weight_kg` (number)
     - `target_weight_kg` (number)
   - Deprecated columns (should not be used):
     - `height` (replaced by height_cm)
     - `weight` (replaced by weight_kg)
     - `target_weight` (replaced by target_weight_kg)
   - Diet preference columns:
     - `diet_type` (string)
     - `diet_plan_preference` (string)
     - `allergies` (string[])
     - `meal_frequency` (number)
     - `meal_times` (string[])
     - `country_region` (string)
     - `diet_preferences` (JSONB - contains all diet related data)
   - Workout preferences:
     - `fitness_level` (string)
     - `workout_days_per_week` (number)
     - `workout_duration_minutes` (number)
     - `fitness_goals` (string[])
     - `workout_preferences` (JSONB - contains all workout related data)
   - Body analysis:
     - `body_fat_percentage` (number)
     - `body_analysis` (JSONB - contains all body-related data)

3. **Data Storage Approach**:
   - Critical data is stored both at root level and in nested JSONB fields
   - Root-level properties are used for direct database queries
   - JSONB fields store complete objects including additional properties
   - Original imperial units are preserved in JSONB while standardized metric values are stored at root level

### Current Status and Next Steps

1. **Ongoing Issues**:
   - React Native text rendering error persists despite extensive type safety improvements
   - The error occurs during initial data loading before UI rendering
   - Need to trace the exact code execution path when the error occurs

2. **Debug Tools Implemented**:
   - Created `app/(dev)/debug-panel.tsx` for inspecting and fixing profile data
   - Added validation and migration utilities in `utils/profileMigration.ts`
   - Improved error logging and handling throughout the application

3. **Next Debugging Steps**:
   - Investigate if there's a rendering attempt happening during profile loading
   - Check for direct string interpolation in useEffect or other initialization code
   - Consider implementing a step-by-step profile loading approach to isolate the issue
   - Examine React DevTools or native debugging tools to identify exactly where the error occurs

4. **Long-term Improvements**:
   - Standardize all data access through getter functions that perform proper type checking
   - Add more comprehensive schema validation when loading profile data
   - Consider simplifying the data structure to reduce duplication between root and nested properties
   - Implement a more robust error boundary system to gracefully handle rendering issues

## Home Screen UI Restoration and Data Display Fixes (March 19, 2025)

1. **Home Screen UI Restoration**:
   - Restored the EnhancedHomeScreen component with all original UI elements
   - Brought back the body metrics display, activity summaries, and circular progress indicators
   - Re-implemented proper card-based UI with gradient backgrounds
   - Fixed styling for all components to maintain the premium look and feel
   - Restored proper activity summary percentages (workouts: 80%, progress: 60%)

2. **Fixed Workout Display Logic**:
   - Corrected the logic for displaying workouts when no workout plan is generated
   - Added proper UI for "No workout plan generated yet" with a "Create Plan" button
   - Fixed the renderTodayWorkout function to handle null nextWorkout values
   - Eliminated misleading "Rest Day" indicators when no workouts exist
   - Added appropriate styling for all workout display states

3. **Body Analysis Card Enhancements**:
   - Implemented proper gradient background using purple accent and dark primary colors
   - Fixed the display to correctly show the user's actual body metrics from onboarding
   - Added support for both metric and imperial measurements
   - Improved number formatting (rounded integers for height/weight, one decimal for body fat)
   - Enhanced visibility with white text and icons against the gradient background
   - Redesigned the "View Full Details" button with semi-transparent background

4. **Meal Timing Improvements**:
   - Fixed meal timings to correctly use times from user preferences
   - Implemented extraction of breakfast, lunch, and dinner times from preferences
   - Added appropriate fallback times when preferences aren't available
   - Enhanced the formattedMealStats logic to use the correct data structure

5. **Theme System Enhancement**:
   - Added missing purple accent color (#9932CC) to the theme system
   - Applied consistent background colors across the entire application
   - Restored original gradient color schemes from the initial design
   - Improved button styling with proper text colors for better readability

6. **Data Handling Fixes**:
   - Enhanced handling of imperial vs. metric measurements
   - Implemented proper access to nested data objects (body_analysis, etc.)
   - Added fallback logic to prevent "undefined" values in the UI
   - Fixed type safety issues throughout the home screen components

These improvements ensure the home screen now properly displays user data while maintaining the premium visual design that makes the app feel like a complete fitness application.

## UI/UX Redesign and Bold Minimalism Implementation (March 14-18, 2025)

1. **Onboarding Layout Redesign**:
   - Implemented consistent LinearGradient background across all onboarding screens
   - Added decorative elements (subtle circles) for visual interest without distracting from content
   - Standardized header styling with back button, title, and subtitle across all screens
   - Enhanced navigation structure with improved transitions between screens
   - Created a cohesive visual language throughout the onboarding experience

2. **User Details Screen Enhancement**:
   - Completely redesigned with Bold Minimalism principles
   - Replaced standard form inputs with visually appealing selection components
   - Implemented age range selection with chip-based UI for better user experience
   - Created gender selection with icons and improved visual feedback
   - Enhanced fitness goal selection with a card-based grid layout and iconography
   - Redesigned activity level selection with clear visual hierarchy and descriptive text
   - Improved measurement inputs with unit toggles for height and weight

3. **Diet Preferences Screen Transformation**:
   - Redesigned with Bold Minimalism principles for improved usability
   - Created visually distinct diet type selection with icons and improved touch targets
   - Implemented allergen selection with chip design for intuitive multi-selection
   - Designed meal frequency selector with numeric options and visual feedback
   - Enhanced meal time selection with platform-specific time pickers
   - Improved water intake goal input with clear unit selection
   - Added consistent styling for all form elements with proper spacing and typography

4. **Body Analysis Screen Improvement**:
   - Enhanced photo upload UI with clear instructions and visual guidance
   - Improved visual feedback for uploaded photos with proper thumbnails
   - Created intuitive analysis visualization with fallback data handling
   - Added proper error handling and fallback states for analysis failures
   - Implemented consistent styling with other onboarding screens
   - Fixed type errors by replacing type references with concrete fallback values

5. **Review Screen Redesign**:
   - Enhanced profile header with gradient avatar styling and completion indicators
   - Created visually appealing section cards for displaying user information
   - Implemented proper empty states for sections without data
   - Added convenient action buttons to complete missing sections directly from the review screen
   - Improved visual feedback on completion status with success banners
   - Designed responsive layout with proper spacing and visual hierarchy
   - Standardized typography and color usage for consistent experience
   - Ensured all navigation between sections works correctly with proper parameter passing

## Mobile Development and Deployment Challenges (March 19-20, 2025)

1. **Expo Metro Bundler Issues**:
   - Users experienced persistent connection errors to Metro bundler on port 8081
   - Implemented multiple alternative connection methods:
     - Tunnel mode with `npx expo start --tunnel`
     - Custom IP configuration with `npx expo start --host YOUR_IP_ADDRESS --port 8082`
     - USB connection with `npx expo start --localhost --android/ios`
   - Still experiencing connection issues despite these approaches

2. **Development Build Challenges**:
   - Created development builds to bypass Metro bundler connection issues
   - Installed necessary dependencies with `npx expo install expo-dev-client`
   - Generated development builds with `npx expo prebuild` and `npx expo run:android`
   - Used EAS Build with `npx eas build --profile development --platform android` for cloud builds
   - Android SDK configuration issues arose for local builds
   - Working on a permanent solution for reliable testing

3. **Profile Data Schema Fixes**:
   - Implemented ProfileSynchronizer utility to ensure data consistency
   - Created OnboardingTracker to properly detect completion state
   - Added comprehensive type checking for all profile data
   - Ensured all data is properly synchronized between nested objects and root properties

## Onboarding Flow Structure (Most Recent Implementation)

1. **User Details Page**:
   - Collects basic user information
   - Handles unit conversions (imperial to metric)
   - Saves to standardized columns (`height_cm`, `weight_kg`, etc.)
   - Preserves original units in `body_analysis` JSONB

2. **Diet Preferences Page**:
   - Captures comprehensive diet information
   - Stores both at root level and in nested `diet_preferences` object
   - Handles allergies, meal frequency, and regional preferences

3. **Workout Preferences Screen**:
   - Manages workout frequency, duration, and focus areas
   - Adapts available equipment based on selected workout location
   - Uses context-aware validation for each option

4. **Body Analysis Page**:
   - Processes body measurements and optional photos
   - Calculates body fat percentage and other metrics
   - Generates recommendations based on body type

5. **Review Screen**:
   - Displays all collected information in a unified view
   - Provides option to complete any missing sections
   - Allows final confirmation before completing onboarding

## Current Application Structure

### Main Features

1. **Home Screen**: Dashboard displaying workout and meal plan summaries, progress tracking, and motivational quotes. The screen now has improved error handling for API failures and proper fallbacks for all content areas.

2. **Workout Tab**: Displays a personalized workout plan with proper error handling and fallback content. Key improvements:
   - Enhanced WorkoutDay rendering with null checks
   - Normalization of API responses to handle different format versions
   - Fallback workout plan implementation for offline usage
   - Clear loading and error states
   - Persistent storage of workout plans in the database

3. **Nutrition Tab**: Presents a 7-day meal plan with detailed recipes and nutritional information. Recent improvements:
   - Better error handling for API failures
   - Improved UI for displaying meal information
   - Clear loading and error states
   - Persistent storage of meal plans in the database

4. **Progress Tab**: Shows detailed fitness journey metrics based on tracked data:
   - Weight trends and progress toward goals
   - Workout completion statistics
   - Body measurement changes over time
   - Nutrition adherence insights
   - User-friendly charts and visualizations

5. **Profile Tab**: Manages user information and preferences:
   - Edit profile functionality with proper unit handling
   - Settings management
   - Account information
   - Debug panel for developers (in dev mode)

### Development Tools

1. **Debug Panel**: Located at `app/(dev)/debug-panel.tsx`
   - Displays raw profile data
   - Provides functionality to fix profile data inconsistencies
   - Validates profile data structure
   - Shows detailed validation results

2. **Profile Utilities**:
   - `utils/profileSynchronizer.ts`: Ensures data consistency
   - `utils/profileMigration.ts`: Provides one-time data repair
   - `utils/onboardingTracker.ts`: Tracks completion status
   - `utils/profileUtils.ts`: Manages database column filtering and unit conversions

## Recent Improvements to Navigation and Edit Functionality (March 19, 2025)

1. **Workout Preferences Enhancement**:
   - Fixed issue where workout preferences weren't persisting when returning to the review screen
   - Added explicit router navigation to review page instead of using router.back()
   - Added useEffect to initialize form with latest profile values
   - Added @ts-ignore comments to handle properties that exist at runtime but are not in TypeScript definitions
   - Implemented consistent navigation approach across all preference screens

2. **Diet Preferences Enhancement**:
   - Updated navigation logic to properly handle the returnToReview parameter
   - Ensured data persistence when navigating back to the review screen
   - Fixed form initialization with latest profile values
   - Maintained consistent navigation strategy with workout preferences

3. **Body & Goals Enhancement**:
   - Added "Edit Body & Goals" button to the review screen, visible when body data is complete
   - Maintained "Complete Body & Goals" button when data is incomplete
   - Updated navigation in user-details.tsx to explicitly navigate to review page
   - Added useEffect to properly initialize the form with latest profile values
   - Added @ts-ignore comments to handle TypeScript property errors

4. **Review Screen Improvements**:
   - Ensured consistent behavior across all sections (Diet, Workout, Body & Goals)
   - Made all sections directly editable from the review page via dedicated buttons
   - Implemented conditional button text based on completion status
   - Maintained user's progress when navigating between screens

5. **ProfileContext Enhancements**:
   - Added workout preferences synchronization to the synchronizeProfileData function
   - Implemented synchronization between root properties and nested objects
   - Added comprehensive logging to track data flow between components
   - Enhanced type safety with @ts-ignore comments where needed

## Current Code Status and TypeScript Challenges

1. **TypeScript Definition Issues**:
   - The UserProfile type definition is missing several properties that exist at runtime
   - Added @ts-ignore comments as a temporary solution to suppress TypeScript errors
   - Properties like workout_fitness_level, workout_location, workout_duration_minutes exist at runtime but are not in TypeScript definition
   - Properties like height, current_weight, target_weight in user-details.tsx have been replaced by height_cm, weight_kg, target_weight_kg but are still used in the form

2. **Data Synchronization Strategy**:
   - Implemented bi-directional synchronization between root properties and nested objects
   - Ensured that data is consistent regardless of where it was initially stored
   - Added proper fallbacks for all properties to handle undefined values
   - Enhanced logging to track synchronization between components

3. **Form Initialization Pattern**:
   - Implemented useEffect hooks to initialize forms with latest profile values
   - Set default values initially to ensure forms are never empty
   - Added explicit setValue calls to update forms with latest data when profile changes
   - Added detailed logging to track form updates

4. **Navigation Improvements**:
   - Implemented explicit navigation to specific routes instead of using router.back()
   - Added returnToReview parameter to track navigation context
   - Ensured consistent navigation approach across all preference screens
   - Fixed routing to maintain user's progress when moving between screens

## Next Steps and Future Improvements

1. **TypeScript Definitions**:
   - Create comprehensive type definitions for UserProfile that include all properties
   - Replace @ts-ignore comments with proper type definitions
   - Implement proper type checking for all profile properties

2. **Code Cleanup**:
   - Standardize navigation approach across all screens
   - Create utility functions for common form initialization patterns
   - Implement more robust error handling and validation

3. **Testing Priorities**:
   - Test navigation between all screens to ensure data persistence
   - Verify that all edit buttons on the review screen work correctly
   - Confirm that forms initialize properly with existing data
   - Ensure data is properly synchronized between components

4. **UI/UX Enhancements**:
   - Add loading indicators during data synchronization
   - Implement form validation feedback
   - Enhance visual feedback when navigating between screens
   - Add progress tracking during onboarding

## AI Workout Generation System (April 2025)

1. **Pydantic-Style Workout Generator**:
   - Implemented a structured workout generation system using Zod schemas
   - Created strong typing and validation for workout plans to ensure consistency
   - Developed a comprehensive workout plan schema that includes weekly schedule, warm-ups, cool-downs, and progression plans
   - Added proper validation to prevent incomplete or malformed workout plans
   - Enhanced markdown code block detection and JSON extraction for improved reliability
   - Implemented robust sanitization of exercise data, particularly the "reps" field
   - Added support for country-specific exercise recommendations

2. **Reliable Generation System**:
   - Implemented a multi-layered approach to workout generation:
     - Primary generation with Gemini 2.0 Flash model
     - Intelligent JSON extraction from markdown code blocks
     - Structured backup generation as secondary approach
     - Step-by-step generation as final fallback
   - Clear progression through fallback mechanisms when primary generation fails
   - Enhanced preprocessing of model outputs to ensure valid data structure
   - Advanced retry mechanism with exponential backoff

3. **API Integration Improvements**:
   - Updated to use Gemini 2.0 Flash for faster, more reliable responses
   - Implemented retry logic with exponential backoff for handling rate limits
   - Enhanced error handling with detailed logging for troubleshooting
   - Added comprehensive JSON extraction and repair for incomplete responses
   - Developed system to ensure minimum requirements are met in generated plans
   - Fixed unsupported features (like system role) for Gemini 2.0 Flash compatibility

4. **Debug and Testing Features**:
   - Added Debug Panel for testing different generation methods
   - Implemented detailed logging of API responses and generation attempts
   - Created tools for inspecting and validating workout plan structure
   - Added insights into generation success rates and failure points
   - Added path-specific error reporting for empty exercise arrays

5. **Error Handling and Resilience**:
   - Enhanced error handling to gracefully manage API limitations
   - Implemented automatic fallback systems when primary generation fails
   - Added preprocessing of extracted JSON to repair missing fields
   - Ensured minimum requirements for workout plans are always met
   - Created cascade of increasingly simplified approaches to guarantee success
   - Improved prompt clarity to reduce validation errors in initial generation

## AI Meal Generation System (May 2025)

1. **Pydantic-Style Meal Plan Generator**:
   - Implemented a structured meal plan generation system using Zod schemas
   - Created strong typing and validation for meal plans to ensure consistency
   - Developed a comprehensive meal plan schema that includes daily meals, nutritional information, and shopping lists
   - Added proper validation to prevent incomplete or malformed meal plans
   - Enhanced markdown code block detection and JSON extraction for improved reliability
   - Implemented robust sanitization of meal data, particularly nutritional information
   - Added support for country-specific recipe recommendations
   - Enforced requirements for completely different meals across all days of the week
   - Added intelligent variations when fallbacks are used rather than repetition of the same recipes

2. **Reliable Generation System**:
   - Implemented a multi-layered approach to meal plan generation:
     - Primary generation with Gemini 2.0 Flash model using enhanced prompts for unique daily meals
     - Intelligent JSON extraction from markdown code blocks
     - Structured backup generation as secondary approach
     - Day-by-day generation as final fallback
   - Clear progression through fallback mechanisms when primary generation fails
   - Enhanced preprocessing of model outputs to ensure valid data structure
   - Advanced retry mechanism with exponential backoff
   - Sophisticated meal variation algorithms to maintain uniqueness when using fallbacks

FitAI Fitness Application

OVERVIEW:
FitAI is a comprehensive fitness application that provides personalized workout plans, diet recommendations, and progress tracking. The app uses AI to create customized fitness programs based on user preferences, fitness levels, and goals.

KEY FEATURES:
- Personalized workout plans with detailed exercise instructions
- Custom meal planning with AI-generated recipes
- Body analysis with visual tracking and measurement recommendations
- Progress tracking for workouts, meals, and body composition
- Fitness goal setting and achievement tracking
- Premium UI with modern design principles

TECH STACK:
- React Native with Expo framework
- TypeScript for type safety
- Supabase for backend database and authentication
- AsyncStorage for local caching
- Google Gemini AI for personalized recommendations
- Expo Router for navigation
- Reanimated for animations

## Developer Tools and Testing Features (June 2025)

1. **Hidden Test UI Components**:
   - All test buttons and debug menus are hidden from end users in production builds
   - Test features are conditionally rendered using the `__DEV__` flag in React Native
   - Debug containers are placed at the bottom of key screens (Home, Workout, Nutrition)
   - Developer-only controls allow testing of alternative AI generation approaches
   - Critical testing features are preserved but invisible to regular users

2. **Nutrition Tab Testing Tools**:
   - Hidden meal plan generation test buttons at the bottom of the screen
   - "Test Workout-Style Generation" button for testing alternative generation approach
   - "Log Plan Structure" button for debugging the current meal plan data structure
   - "Force Regenerate" button for testing the meal regeneration pipeline
   - Direct access to different fallback generation methods for testing
   - Debug mode toggle for enabling more verbose console logging
   - All contained within a conditionally rendered `debugContainer`

3. **Workout Tab Testing Tools**:
   - Test buttons for different workout generation methods
   - Debug options for viewing raw workout plan JSON
   - Controls for testing fallback generation mechanisms
   - Performance testing tools for AI generation timing
   - Test buttons for marking all workouts complete/incomplete
   - All hidden from end users in production builds

4. **Developer Access Mechanisms**:
   - Default access: All test features are visible when app is run in development mode
   - Emergency access: Special profile flag `enableDebugMode` can enable debug features in production builds
   - Debug panel: Accessible in development builds at `app/(dev)/debug-panel.tsx`
   - Console logging: Enhanced in development mode for detailed tracing
   - Implementation pattern: `{__DEV__ || profile?.enableDebugMode) && (<DebugControls />)}`

These development tools maintain a clean user interface for end users while giving developers robust testing capabilities for the complex AI-powered features of the application.

DATA STORAGE ARCHITECTURE:
- Database Structure: Core database tables include profiles, workout_completions, and meal_completions
  - Profiles table: Stores user profile information including both scalar columns for direct querying and JSONB columns for complex data
    - Scalar columns: height_cm, weight_kg, target_weight_kg, has_completed_onboarding, current_onboarding_step, streak_days
    - JSONB columns: diet_preferences, workout_preferences, body_analysis, workout_plan, meal_plans
  - Workout completions table: Records of completed workouts including date, workout_id, and calories_burned
  - Meal completions table: Records of completed meals including date, meal_id, and nutrition info

- Data Synchronization Strategy:
  - Dual storage approach with Supabase as primary source of truth and AsyncStorage for offline capability
  - Critical data stored both as root-level properties (for query performance) and within JSONB objects (for flexibility)
  - Synchronization utility ensures consistency between nested objects and root properties
  - Error handling includes automatic retries for critical operations and fallback to cached data when needed
  - Field naming conversion between frontend (camelCase) and database (snake_case) handled automatically

RECENT UPDATES AND IMPROVEMENTS:
1. Body Analysis Enhancement:
   - Improved visualization of body measurements
   - Added support for both imperial and metric units
   - Enhanced analysis text display with better formatting
   - "Add Body Data" prompt for users who skipped initial body analysis

2. Data Persistence Improvements:
   - Enhanced synchronization between local and server storage
   - Added deep merging strategy for profile updates
   - Implemented field duplication strategy for critical data
   - Added comprehensive error handling and recovery mechanisms
   - Optimized data loading performance with caching strategies

3. UI/UX Enhancements:
   - Completed "Bold Minimalism" design language implementation
   - Enhanced typography and spacing for better readability
   - Improved progress visualization with custom charts and indicators
   - Added micro-animations for user engagement
   - Optimized loading states and transitions

4. System Migration Preparation:
   - Standardized data access patterns across the application
   - Enhanced documentation of internal architecture and data flow
   - Improved error logging and debugging tools
   - Added data validation and sanitization for all inputs
   - Ensured cross-platform compatibility with responsive design

5. Recipe Generation Reliability:
   - Enhanced meal plan generation with more stable AI prompts
   - Improved recipe formatting and ingredient measurements
   - Added fallback recipes for offline use
   - Enhanced nutrition tracking accuracy

KEY PROJECT FILES:
- contexts/ProfileContext.tsx: Manages profile state and synchronization
- contexts/AuthContext.tsx: Handles authentication state
- lib/supabase.ts: Initializes Supabase client and provides utility functions
- services/trackingService.ts: Manages workout/meal completion tracking
- utils/profileSynchronizer.ts: Ensures data consistency across nested objects
- components/progress/BodyAnalysisCard.tsx: Displays body analysis information
- app/(tabs)/progress/body-details.tsx: Detailed body analysis screen

## Recent Data Persistence and Display Improvements (June 2025)

1. **Enhanced Profile Data Synchronization**:
   - Fixed critical issue with user name not being properly stored in database
   - Enhanced `sanitizeForDatabase` function to explicitly preserve `full_name` field
   - Updated `DATABASE_COLUMNS` array to ensure `full_name` is included as a valid column
   - Added robust logging to track profile data synchronization between components
   - Implemented proper first name extraction from full_name for personalized greetings

2. **Home Screen Personalization Improvements**:
   - Enhanced greeting section to display user's first name instead of generic "User"
   - Added proper fallbacks when user name is unavailable
   - Improved profile data retrieval with multiple fallback paths
   - Fixed avatar display to use appropriate initials from user's name
   - Enhanced greeting to change based on time of day (morning/afternoon/evening)

3. **Profile Data Sanitization Safeguards**:
   - Added protection against critical fields being filtered out during database operations
   - Enhanced field preservation logic in the sanitization process
   - Implemented comprehensive validation to ensure required fields persist
   - Added detailed logging for troubleshooting data persistence issues
   - Created more robust error recovery for profile data inconsistencies

4. **Enhanced Data Display Logic**:
   - Improved calculation of progress percentage towards weight goals
   - Enhanced fallback logic for missing measurement data
   - Fixed unit conversion and display for height, weight, and other metrics
   - Implemented proper rounding for measurement values
   - Added comprehensive null/undefined checks for all profile data display

These improvements ensure that all user data, especially personal information like name and profile settings, is properly stored in the database and accurately displayed throughout the application.

## Notification System Implementation (June 2025)

1. **Comprehensive Notification Architecture**:
   - Implemented a robust notification system for workout, meal, and water reminders
   - Created a dedicated initialization module that runs at app startup
   - Integrated notification permissions handling with proper error recovery
   - Connected profile preferences directly to notification scheduling
   - Implemented user-friendly reminder timing based on activity patterns

2. **Water Reminder Optimization**:
   - Implemented intelligent water reminders that track actual water consumption
   - Added hourly reminders that only trigger if no water has been logged recently
   - Implemented 9 PM cutoff to avoid disturbing users at night
   - Connected WaterTrackingCard directly to notification service to update last water log time
   - Enhanced user experience by reducing notification fatigue through smart timing

3. **Workout and Meal Reminder Integration**:
   - Connected workout reminders to user's preferred workout schedule from onboarding
   - Scheduled meal reminders based on user-specified meal times
   - Implemented proper profile data synchronization for notification preferences
   - Added toggles in profile settings to enable/disable specific notification types
   - Enhanced reliability with proper error handling and logging

4. **Technical Implementation Improvements**:
   - Created separate initialization module (`services/notifications/init.ts`) to ensure proper startup
   - Fixed font loading and layout issues for improved stability
   - Implemented automatic error recovery for notification setup failures
   - Added comprehensive logging for notification-related events
   - Ensured cross-platform compatibility for both iOS and Android

5. **App Initialization Optimization**:
   - Refactored app initialization process for improved reliability
   - Fixed critical issues with duplicate imports and missing font resources
   - Enhanced error handling during startup to prevent crashes
   - Implemented progressive loading pattern for better user experience
   - Added proper initialization sequence for all essential services

These enhancements collectively create a more engaging and helpful user experience by providing timely reminders for workouts, meals, and water consumption based on the user's actual behavior patterns and preferences. The system is designed to be helpful without becoming intrusive, adapting to the user's schedule and activity.
